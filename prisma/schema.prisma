generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id              Int        @id @default(autoincrement())
  username        String     @db.VarChar(200) @unique
  password        String     @db.VarChar(200)

  categories      Category[]
  account         Account[]
  transaction     Transaction[]
  card            Card[]

  @@map("user")
}

enum CategoryType {
  INCOME
  EXPENSE
}

model Category{
  id              Int        @id @default(autoincrement())
  name            String     @db.VarChar(30) @unique
  type            CategoryType

  userId          Int
  user            User       @relation(fields: [userId], references: [id])

  transaction     Transaction[]
  cardExpense     CardExpense[]

  @@unique([name, userId])
  @@map("category")
}

model Account{
  id              Int        @id @default(autoincrement())
  name            String     @db.VarChar(30)
  openingBalance  Decimal    @db.Decimal(10,2) @default(0)
  createdAt       DateTime   @default(now())


  userId          Int
  user            User       @relation(fields: [userId], references: [id])

  transaction         Transaction[]
  cardPayment         CardPayment[]

  @@unique([name, userId])

  @@map("account")
}

model Transaction{
  id              Int           @id @default(autoincrement())
  description     String        @db.VarChar(30)
  value           Decimal       @db.Decimal(10,2)
  dueDate         DateTime
  type            CategoryType
  wasConfirm      Boolean       @default(false)

  userId          Int
  user            User          @relation(fields: [userId], references: [id])


  categoryId      Int
  category        Category      @relation(fields: [categoryId], references: [id])

  accountId       Int
  account         Account       @relation(fields: [accountId], references: [id])

  @@map("transaction")
}

model Card{
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(30)
  limit         Decimal       @db.Decimal(10,2)
  closeDay      Int           @db.SmallInt()
  dueDay        Int           @db.SmallInt()

  userId        Int
  user          User          @relation(fields: [userId], references: [id])

  cardExpense   CardExpense[]
  cardPayment   CardPayment[]

  @@unique([name, userId])
  @@map("card")
}

model CardExpense{
  id              Int           @id @default(autoincrement())
  description     String        @db.VarChar(30)
  value           Decimal       @db.Decimal(10,2)
  date            DateTime

  categoryId      Int
  category        Category      @relation(fields: [categoryId], references: [id])

  cardId          Int
  card            Card          @relation(fields: [cardId], references: [id])

  @@map("cardExpense")
}

model CardPayment{
  id              Int           @id @default(autoincrement())
  value           Decimal       @db.Decimal(10,2)
  date            DateTime

  accountId       Int
  account         Account      @relation(fields: [accountId], references: [id])

  cardId          Int
  card            Card          @relation(fields: [cardId], references: [id])

  @@map("cardPayment")
}